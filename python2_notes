-- Start 09Jul
XML Parser 

-- End 09 Jul
--Start 08 - Jul

Beautifulsoup for HTML processing

If there is no api but there is a website which provides data -- 
For e.g. Website publishes top 10 movies.
On a website -- data is published via HTML. In order to extract data from there -- this can be handled via BeautifulSoup
Beautifulsoup can be used to extract data from html 

Requests module is still to be used -- Beautifulsopu is used for webscraping and it is a html parser

soup.find_all('a')
These are all dictionaries. 

l = soup.find(id='link3') # finds all links with that id

if we are interested in a paragraph with class attribute
soup.p('class') # check it for proper syntax

list_st_links.py

URL = "http://www.srikanthtechnologies.com"

resp = requests.get(URL)

if resp.status_code != 200
print('Sorry')
exit(10)

bs = BeautifulSoup(resp.text, 'html.parser')
links = bs.find_all('a') #find all is looking for all tags -- in this case -- it is anchor tags
for link in links:
    if 'href' in link.attrs:
        href = link.attrs['href']
        if not href.startswith("http"):
            if not href.startswith("/"):
            
            href = URL + "/" + href -- pre-append url to the href

REST API is more dependable than webscraping 
list_st_batches.py -- program to list all batches


--ASsignment -- How many days to go for start of the batch -- 
look at assignment output -- assignment_output_PYTHON_31_MAY_2021 7_8_2021, 3_23_05 PM.png

-- End 08 - Jul
Start -07 Jul
Assignment 1 discussion from previous day
sort_tasks.py -- pseudo code -- we need to convert the data into a data structure(list) -- tuple and then use lambda function. Append data to list after using sorted on tuple

Multi Threading -- page 138 example

Request Module
picture to look at -- 62.png

REST API URL
api.github.com/users/srikanthpragada

Convert JSON to dictionary and access the data
---You have to install a library called REQUESTS (also called as http library) -- it will allow you to make a http request
APIs
a) Some require a Key for authentication -- this has to be created first
b) Some require authentication details
c) Some are free to use like github api 

Example - Code
---- Start of code
#get git user info
import requests
user = "avbpk1"
URL = f"api.github.com/users/{user}"

resp = requests.get(URL)
if resp.status_code == 200: #status code 200 in http request is success
    print("Sorry!")
    exit(1)

details = resp.json() # Response text(JSON) to be converted to dictionary
print(details['name'])
print(details['company'])
print(details['location'])


--- End

Assignment -- All the details that are not null are to be displayed.
publicapis.io

REST COUNTRIES gives an array of JSONs -- list of dictionaries

countries = resp.json()
for country in countries: # for country in sorted(countries,key = lambda c:['region']) -- note this is a powerful featuree i.e. keys in dictionary - remember this is a list of jsons
   print(f"{country['name']:50} {country['region']}")

list_top_10_countries.py -- Countries by population


for country in sorted(countries,key = lambda c:['population'],reverse=True[:10]:) -- note this is a powerful featuree i.e. keys in dictionary - remember this is a list of jsons
   print(f"{country['name']:50} {country['population']:12}")

inr_to_usd.py

Assignment 2 --
Look for weather api and display it for a particular city

------Some times data is in the form of html and not rest api --
Take data from websites

Take the user name and display the repositories of the user -- git repos

--get/post/delete is also there
-- End 07 Jul


Start 06 Jul
Date Time Module

Date Time Module has 4 different classes - date, time, datetime and timedelta

from datetime import *

from datetime import *
d1 = date(2021,1,1)
print(d1)
print(date.min)
d2 = date.today()
print(d2)
print(d2-d1)

d3 = d2+timedelta(days=10)
print(d3)

page 131 of course material

timedelta -- u can specify days, seconds, weeks, minutes, microseconds) etc
strftimeformat class can be used to format date/time.

Convert String to date time
dob = "24-10-1998"
d4 = datetime.strptime(dob,'%d-%m-%Y') ##strptime stands for string parse time
print(d4)

-- libdemo\list_tasks.py
if len(parts) < 2 
   continue # this will help tackle blank lines
   
Assignment 1 -- Display the data in the sorted order of the start date
Assignment 2- Players.txt contains the name of the player and DOB -- YYYY-MM-DD. Display the name and the age of the player and in the sorted order of the age.Descending order of the age
-- 61.png for reference. If invalid entries are there, ignore them

Threading module. Thread Class can be used to handle multithreading -- page 136 of course material
page 138

End 06 Jul

-- Start 05 Jul
Regular expressions -- Regular expression is a string with special characters to find patterns.
For e.g. -- we want to search whether a string contains only certain patterns of characters

Module RE is for regular experession.

$ indicates that the end 

PYTHON_31_MAY_2021 7_5_2021, 2_46_11 PM.png -- picture for re output. re.search returns match object.

full_match.png
Whole string is a match or not example

Assignment 1 
-- Accept a password and display whether it is valid or not. Valid password contains min 6 letters and should have alphabets, digits and the allowed special chars
are * # @

There is also a match -- this searches for the given pattern at the beginning of the string. 

search
full_match
match
findall -- searches for all occurances of the search string
findall_examples.png -- all number search and atleast 3 digits search in the 2 last lines examples
word_character_examples.png -- \w+ -- search for full word 

split_with_non_digits_using_re_split.png  -- D+ is indicating split when you encounter one or more non digit and hence output is able to split when it is a space, or a comma ora : etc
same thing above can be achieved with findall -- findall_non_digits_using_re_split.png

sub -- is for substititute - can do a good job 
replace_multi_with_sing_space_example.png

-- Grouping Concept 
extract_groups_name_digits.png 
extract_groups_name_digits_example.png
split

Assignement 2 -- take a filename like -- mobiles.txt
mobile_num_assignment.png

Assignment 3 --
Accept a file and replace one or more non word characters with a single space and write the new content into target file.

page 128 of the course material

compile is used to create a new pattern

compile_pattern_examples.png

datetime function

-- End 05 Jul

-- Start 03-Jul--
57.png  -- potential problems are if the data is huge -- technique 1
58.png -- technique2 -- green 
2) Accept 2 files and display the union of lines in the files -- duplicates should be removed -- 
    
    pseudo code -- convert every thing from file 1 to a set and file 2 to set. 
      with open(file1,"rt") as f1, open(file2,"rt") as f2:
      lines = set(f1.readlines()) | set(f2.readlines())

59.png -- gives the poutput of os.walk(r"c:\classroom\may31\demo") -- gives a tuple
next(allfiles) will give a value each time -- generator

count_python_files.py -- very good demo f how files are to be used. If u dont convert filter into list -- then it will be give an error.

search_python_files.py -- pattern check -- use case is -- for e.g. if we want to know wher we used __init__

--- Assignment related to walk
Accept starting directory and search string and display all the files where the name contains the search string. Tip -- no need to open the file. Count and display the count. 
If we can make it command line -- it would be even better.
60.png -- on how it would like to run from a command line

--End 03-Jul

-- Start 02-Jul
PICKLE -- Python object serialization

PYTHON_31_MAY_2021 7_2_2021, 2_39_38 PM.png

Pickle is the module -- Dump and Undump

f = open("person.dat","wb") # -- Write in binary mode
p1 = Person("Srikatnh","srikanthpragada@yahoo.com")
pickle.dump(p1,f) ## pickle an object
print("object dumped");
f.close()
---Undump or deserialization

Use case for picking, unpickling 
Machine Learning Models -- PYTHON_31_MAY_2021 7_2_2021, 2_45_29 PM

Binary Serialization -- collection of bytes

PYTHON_31_MAY_2021 7_2_2021, 2_48_23 PM -- good picture for how object can be written into different formats i.e. bytes, json, xml

In python -- dictionary can be converted to json
JSON Module


PYTHON_31_MAY_2021 7_2_2021, 2_56_34 PM -- picture for understanding
json_demo

dump(object,file)
dumps(object) -- # difference between the above and this is not writing to a file
jsonstr = json.dumps(p.__dict__)

load(file)
loads(str)
people_dict = map(lambda p:p.__dict__,people) -- this will not work until you convert map to a list
jsonstr = json.dumps(p.__dict__)

people_dict = list(map(lambda p:p.__dict__,people)) -- list is required because map is a lazy object

look at json_demo.py

Assignment 1 -- You have a json to be loaded into memory
convert the list of person json objects to list to person objects
json to dictionary -- dictionary to person.

PYTHON_31_MAY_2021 7_2_2021, 3_06_01 PM

---SYS Module --

--OS Module -- Operating system interaction--

-- Assignments

1) Accept a file and remove all blank lines from the file -- use a temporary file or use a list
2) Accept 2 files and display the union of lines in the files -- duplicates should be removed -- 
    
    pseudo code -- convert every thing from file 1 to a set and file 2 to set. 
      with open(file1,"rt") as f1, open(file2,"rt") as f2:
      lines = set(f1.readlines()) | set(f2.readlines())
    
3) 


-- End -2-Jul

-- Start 01-Jul
Debugging Mode

generator expression
page 112 of course material

ex.g. 
st = "Python 3.8"
digits = (ch 

---
Files

--lib_demo

Assignment -- write emails into a file in sorted order

sorted_emails.py
53.png  -- the email that is read via the file read is read with the new line character.To get rid of the newline and spaces
use the strip command

Assignment 2 -- if u have leading or trailing spaces in emails.py -- get rid of them. 
---Start
# Take emails from emails.txt and display them in sorted order

f = open("emails.txt", "rt")
emails = set()
for line in f.readlines():
    parts = line.strip().split(",")
    
    for email in parts:
        email = email.strip()
    emails.update(parts)

f.close()

fw = open("sorted_emails.txt", "wt")
for email in sorted(emails):
    fw.write(email + "\n")

fw.close()
--- End


Assignment 3 -- instead of displaying sorted emails onto a screen -- write contents into sorted_email.txt

54.png -- data from prog to bugger to disk diagram -- 55.png
it is a good idea to close the file. Otherwise there can be data loss.

Reason is data from buffer to disk is written only when the buffer is full or when the file is closed. 56.png

With statement can be used to close the file automatically
116 page of structure

-- End 01-Jul


-- Start 02 - Jul
assignment discussion
SErialization 
Json
-- End 02-Jul

-- Start 30 Jun
User Defined Exceptions
account.py

Class InsufficientError

In the stack -- raise an error STack Empty Error -- User Defined exceptions

Assignment 1 -- Create an exception called StackEmptyError and raise it when you try to pop with empty stack. Even for peek this has to be done. 
Assignment 2 -- Imagine a stack with predefine capacity. Modify the stack.py to pre-define the capacity . If the capacity is reached and trying to push more, An error StackFullError should be raised
             -- An enhancement is required

Assignment 3 - Queue class -- enque and deque -- double ended queue -- add first , add last , remove first, remove last methods
type(li), type(l) returns listiterator and list 

49.png, 50.png, 51.png
page 109 of course material

we can create our own iterators as long as it follows a framework

Anything you need ti create as an iterable, ir requires a specifal method called __iter__

e.g def __iter(self) -- page 108 and 109 of course material
52.png -- range -- range is also an object of a class called range. 


Iterators and Generators important concepet

------------Generator
Generator is simpler than iterator. Internally it is a function and it can generate a value.
Special Key word -- yield makes it a generator.
if we have a function which returns a value with the key word yield and not return -- it is called a generator
generator_demo.py

Assignment 4 -- Create an iterator that takes starting and ending numbers and produces all paindromes in between the numbers -- create 2 classes iterator and iterable.


-- End 30 Jun

-- Start 29 Jun
Exception Handling
44.png -- for various exception scenario flows

45.png

Important of unhandled exceptions -- try block will always execute

All exceptions are classes and derived from Exception -- print("Error:",ex) --

except Exception  as ex: # Exception is a Superclass for all other excepptions - for e.g. ero Division Error -- page 105 of the material




46.png 
All functions should raise/return an error so that they are fault toleerant
communicate back that he is not able to finish 
-- End 29 Jun

-- Start 28 June
I want to force every sub class to have ge tpoints

-- players.py

@abstractmethod -- decorator that needs to be imported . When you make a method abstract method, it is an indication that every subclass has to be implemented - overrride
ABC -- stands for Abstract Base Class

class Player -- 25.png -- diagram 

you have to import ABC class as below

from abc import ABC, abstractmethod

2 important points
1) Every subclass must override
2) Player should not be created as an object i.e. No objects for player or student -- only sub classes should be objectable and abstract class , abstract methodes are important. Abstract class is 
defined by key word ABC

from abc import ABC, abstractmethod.
class Player(ABC)

---Improvement on previous assignment -- make Person as Abstract class so that Person cannot be created as an object.
Abstract Methods are to be implemented by all Subclasses -- e.g getpoints in players and occupation in person

2 important functions
>>>a=10 
>>> isinstance(a,int) # is instance is a method which compares -- Can be useful to find out what type of object it is 
True
>>issubclass(str,object)
>>True

---------Multiple Inheritence -- Important feature of python
Multiple Classes
Multiple Hierarchy

When one class is created from one or more classes -- it is called Multiple inheritence. It is availabe in C++ and Python only. Note -- Java and C# does not have it.
-- 26.png

-- oop/mi folder
Demo1 -- 27.png -- diagram -- multiple inheritence -- class derived from multiple classes. Analogy  -- inheriting property from maternal/paternal side

Demo2.py -- 28.png -- If there is a method in subclass that overrides a method in superclass -- it is going to override it. If we have a subclass version -- we shouldnt huse superclass version
-- 29.png

Demo3.py -- 30.0png -- if process is present in both , then it will try to derive it from the first super class and if it is not there then it goes to the next superclass
C->A->B -- order of inheritence is important

Demo4.png - 31.png - 32.png - 33.png, 34.png -- has the prder 

Demo5 -- 35.png , 36.png -- gives version of C. Srikant spent a lot of time analysing why it was path D->B->A->C->A and not D->B->A->C->A 
37.png -- full blown hierarchy
and it will check if there is any subclass on the right of D. Basic principle is s -- 38.png -- A is crossed out because there is a right of subclass to D and also object is remvoed because of the subclass

MRO -- MEthod Resoultion Order

call_mul_const.py

Example of how you can call constructor of both super classes -- Calling both the constructors or constructor of both super classes
when you call it with a class name i.e. A.__init__(self,p1) -- creates a class


call_mul_methods.py -- 40.png -- indicating object of C is being passed to A as opposed to A

-- End Jun 28

-- Start 26 Jun
Inheritence 

--Suppose I want to implement total fee as an attribute but I want to treat it like an attribute but internally I want it as a process, then it has to be decorated as a property.
@property
def totalfee(self)
    return Student.course_fees[self.course]
    
    Other decorators are getter and setter.
 Decorators can change the behaviour of the class. -- 018.png

#pre defined built in functions for a caclass -- page 85 
New attributes for an object can be created -- 19,20.png. It is possible to create an attribute without pre-defining it

>>>hasattr(obj,'name') -- returns True of the attribute name exists in the obj
>>>getattr(obj,'name') -- 21.png
>>>setattr(obj,'email','abc@gmail.com')
>>>delattr(obj,'email')


Page 92 -- Look at the picture -- Inheritence concept 22.png
Page 93
23.png -- Superclass and subclass -- In some prog languages it is called -- Baseclass and derived class.
Inheritence is a design concept to avoid redundancy and expandable

-- Super is not a key word -- it is a function
24.png 

--Assignment -- implement picture in pag 93 by createing the person super class and other subclass
oop players.py -- inheritence example.

--Assignment 2
Provide getpoints i.e. return points of the player. for both cricketer and footballer. Points are calculated as follows
For each goal - 1 point. Every 200 runs - 1 point and every 10 wickets 1 point
Create additional subclass -- Tennis player. No of grandslams.

-- End 26 Jun

-- Start 25 June
Static methods 
sort_custom_class.py -- adding 2 rectanbles

--Savings Account
Use case -- Minimum balance to be maintained

create a variable -- self.minbal = 5000

--> Ass1
Add tax percentage for student. Consider that at the time of calculating the total fee. -- Think of providing a discount rate. So that you can calculate adding tax and reducing discount
--Consider how you can change discount from course to course. Discount rate specific to course

--> Ass2 



-- End 25 June

-- Start 24 June
-- privATE_demo.py -- name mangling
How to Restrict access i.e. limit attributes from being accessed directly

self.__age = age # Private attribute
print(p1.__dict__) will return the dictionary of actual attributes -- even the private variables can be accessed -- for eg. 

print(p1._Person__age)

Private Members(Name Mangling) -- refers to the concept of just the name reference change -- for private variables.
Python is kind of created for the civilized where users respect the nature of the definition although it is not mandatory

So, if some thing is declared as private, though it can be accessed, the expectation is that it should not be accesssed.

# Special Method  - __str__
def __str__(self):
     return f"{self.name} - {self.age}

# Special Method2  - __eq__(self,other)
def __eq__(self,other):
     return self.name == self.name and self.age == self.age

Assignment -- Go back to all classes you created , __str__ and __eq__ (dunder eq) is for comparing the objects

# Special Method3  - __gt__(self,other)
def __eq__(self,other):
     return self.name == self.name and self.age == self.age

__gt__ or __lt__ is mandatory if we want to sort the custom classes -- equivalent to operator overloading in c# and c++



-- Create Custom Class and Sort objects of custom class
class Rectangle:
    def __init__(self,length,width)
        self.length = length
        self.width = width
   
    def __str__
    rect_list = [Rectangle(10,20)


take account and student class and create the special methods


Ass 3 -- create a stack class 
methods push - which adds value, pop will return value, peek will return value, empty thje string , length

PYTHON_31_MAY_2021 6_24_2021, 3_23_56 PM.png

PYTHON_31_MAY_2021 6_24_2021, 3_25_49 PM.png

queue -- enque and dequeue

LIFO
Stack


-- End 24 June


-- Start 23 Jun
OOP in python
A method is a function inside a class. So , method has to be invoked only with the object

Where as Functions is a term that is used to to call with any associated object attached to it.

Data amd code are most important elements of any application. 
OOP is about encapsulating data and code. Data is in the form of variables. Code is in the form of functions. 000.png, 001.png

Encapsulation means putting data and code together. Data should be accesible only to the code.

l = [1,10]  -- list is a class, l is the object . class is like a data type or blue print. 
l.append(5) --  append is the function 
What operations can be performed on an object (i.e. l in this case is determined by the functions associated with the class -- list in this case)

Encapsulation , Inheritence
Summary -- Data amd code are most important elements of any application. 
Code is like librarian. Data is like books in the library. Analogy.

Use Case -- > Savings Account. To create a class called savings account.
Standard Naming Convention -- Pascal Case -- First letter of every word is upper case -- 002.png

UML Class Diagram
|--------------------------------------|
|SavingsAccount - Class                | 
|--------------------------------------|
|acNo                                  | 
|acName                                |     
|balance                               | 
|------------------------------------- | 
|open(acNo,acName)                     | 
|deposit(amount)                       | 
|withdraw(amount)                      | 
|info()                                | 
|------------------------------------- | 

class SavingsAccount:
    # Methods -- functions in a calls are called Methods. Python is a dynamically typed language
    def open(self,acno,ahname): #self is a special parameter. Self is called This Reference in Java and C#
        # l = acno -- if you try this instead of self -- l will be a local variable
        # object attributes -- Object attributes is the term in python , java - instance variables,  c++ data variable
        self.acno = acno
        self.ahname = ahname  # self is nothing but an object
        self.balance = 0
        
    def info(self):
        print ("Account Number : ", self.acno)
        print("Account holder name : ", self,ahname)
        pritn("Acciytb Balance: ",self.balance)

    def deposit(self,amount):
        self.balance += amount ## method is interchangeably used with function
        
    def withdraw(self,amount):
        self.balance -= amount ## method is interchangeably used with function
        
a1 = SavingsAccount() # - a1 will be stored in slef
a1.open(1,"Andy")
a1.info()

#---below is an example of just creating an object but a2.info() will give error because there are no attributes. attributes are invoked by open()
a2 = SavingsAccount()           #003.png # Here there is an object without any data.
a2.info()                       

A better design is something like

a2 = SavingsAccount(1,"Andy") -- this will avoid extra step of open
print(a1.balance) -- this is allowed in python by default -- this is not allowed in other oop like java, c# etc. This is a case where the data is being accessed directly from outside and not via a function
                                                          -- the above can be avoided but to be discussed later.          
ideally -- another function should be written 
    def getbalance(self):
           return self.balance  




class SavingsAccount:
# Constructor IS A SPECIAL METHOD

   def__init__(self,acno,ahname, balance=0):    #Camel Case -- getBalance()
    # Methods -- functions in a calls are called Methods. Pythin is a dynamically typed language
    def open(self,acno,ahname): #self is a special parameter. Self is called This Reference in Java and C#
        # l = acno -- if you try this instead of self -- l will be a local variable
        # object attributes -- Object attributes is the term in python , java - instance variables,  c++ data variable
        self.acno = acno
        self.ahname = ahname  # self is nothing but an object
        self.balance = 0
        
    def info(self):
        print ("Account Number : ", self.acno)
        print("Account holder name : ", self,ahname)
        pritn("Acciytb Balance: ",self.balance)

Constcutor is a definition that is automatically called when ypou create an object
Constructor is a function that has the same name as the class name. In other languages it is the same
special method is a method that is not invoked separately. Constructor is a special method. I.e when the object is created -- constructor is automatically called.
may31\demo\account.py 
material -- pAGE 79, 80

All operations related to an object should be done using a method

 Unfortunately in Python there is no universal naming convention unlike Java and C#
 
 Normal Methods are to be explicitly called where as Constructor Method is automatically called
 
 --> Assignment 1
 Create a class that stores student name, course and fee paid.
 
 Create a constructor that takes student name, course and fee paid. Fee paid defaults to 0 and course defaults to "Python"
 
 Provide a method to print all details and another method to process payment of the student. 
 Assume Valid courses are "C","Java",and "Python" with total fees 3000, 5000 and 4000
 
 Provide a method that returns balance to be paid by students. Skeleton provided in student.py
 
-- End 23 Jun

-- Start 22 Jun
>>> imp str_funs
>>> dir str_funs -- will list all functions in that moodule str_funs
Documentation associated with a modeule
"""
aNYT THING ENCLOSED WITHIN THIS Will becom documentation -- below is a skeleton
desc
:param
:return

"""
REPL needs to be restarted to take efect
help(str_funs.count_upper)
-- End 22 Jun

Every folder which has a set of funs can be treated as a package
-- special file __init__py

__init__py.py
print('Loading My Package lib')

from mylib import num_funs
print(num_funs.iseven(10)) 
----
Loading package mylib #-- This is from __init__py.py 
True

from mylib import * -- by default will do nothing unless you add the following in 
__init__py
__all__ = ['num_funs']  -- 



-- Start 20 Jun
Modules
-- Modules can have statements and functions. It is possible to use module in another module. By way of importing . And then we can invoke those functions. 98.png
- str_funs.py in modules folder
import can have an alias. 
e.g. 
import str_funs as sf

from str_funs import count_upper

When ever you refer to a module , you are still referring to the module. All the code will be executed. It is not a good idea to run the code while importing the module. This is to be
executed only when invoke the module.

Modules can be imported. -- During import, we dont want to code be executed
Modules can be run. 
To do that 

print(__name__) -- double underscore -- all pre-defined name start with double underscore or dunder.
returns __main()__

if we invoke module directly , the name of the module is is __main__()
if we import the module , then module is imported and the name is str_funs

differentiate between invoking and importing

How to invoke/import modules from a different directory - 99, 100.png

Only those defined in the module search path will be included.
sys.path variable controls it

It is important to know how to run the program from command line
factorial.py
101.png -- how to make use of or accept parameters from command line -- sys.argv -- list
sys.argv[1] is the first parameter and always the function name -- in command python.py 15
dont proceed if the input is not available. -- factorual.py example

-- Assignment 1 
Enhance Factorial Program 

python factorial.py 7 10 15  should display factorial for each number
i.e.
Factorial 7
Factorial 10
Factorial 15

-- Assignment 2

Create python ValidatePassword.py xyz where xyz is the password parameter
-- Must have one or more uppercase
-- must have digit
-- Must have a @, !, *
-- Must have min 6 chars

-- Assignment 3
Create a module called Encrypt with following functions 
encrypt -- takes a string and returns another string . Change the ascii code of the characters 
decrypt function -- 



#Create a function that takes a list and a value to delete and delete all the occurances of that value from that list
#lst = [10,20,30,20,50]
#delete(lst,20) -- should remove 20 from the list

def del_element(lst,dval):
    for elm in lst:
        if elm == dval:
            lst.remove(elm)
    return lst

lst1 = [10,20,30,20,50]
lst2 = del_element(lst1,20)
print(lst2)-- End 20 Jun

-- Start 19 Jun
85.png, 86.png
pass_parameters.py

passing parameters by reference -- address and not value
if an immutable object is passed, like for e.g. integer -- it does not change the value, instead creaetes a new address for it


If a mutable object is passed -- for e.g. list -- 87.png, 88.png

l = [1,2,3]
def addfirst(lst,value):
   
Everything is passed by reference i.e. address not by value

formal parameter changing by actual parameter will depend on whether the object is mutable or immutable

Assignment 1
Create a function that takes a list and a value to delete and delete all the occurances of that value from that list
lst = [10,20,30,20,50]
delete(lst,20) -- should remove 20 from the list

Assignment 2
Create a function that takes a list and interchanges first 3 values with last 3 values
[1,2,3,4,5,6,7] should result in [7,6,5,4,3,2,1] -- 7 and 1 are interchanged, 6 and 2 are interchanged and 5 and 3 in this example

Assignment 3
Create a function that 


list_products.py -- 

---Local Functions is a function that is inside another functuon -- 89.png

g = 100 # these are global variables and can be accessed from all functions
def f1():
    ev = 10 # this is called enclosing variable and can be accessed from inside the local function.
    #Local function or nested function
    def f2():
        nonlocal ev # if this nonlocal keyword is specified, you are saying you want to make use of ev from the parent function. 
        global g -- similarly global is a keyword
        ev = 0
        lv = 100
        print(lv,ev)

when you create an enclosing variable in a local function  -- 90.png, 91.png
nonlocal ev -- nonlocal is a key word to indicate to use envlosing variable 

order of creation
is there a local variable, if not then enclosing variable, if no enclosing, then it will check global variable, if it is not global, then it will look into built in variable

--Next Topic is 
-- End 19 Jun

-- Start 18 Jun
Remember -- when a function does not have explicit Return for False conditions - it will return None which is equivalent to False

Sorted function -- very powerful along side, filter, map and sorted

80.png

nums = [-10,10,45,-6,7]
for n in sorted(nums, key = abs):
prnt n;

-- Assignment
1) Assume a list of strings which may contain numbers and non numbers and display sum of the numbers. -- clue -- use filter and pick up numbers and sum them.
2) Assume a list of values where you have the product name and price separated by comma (81.png) and display these strings in the descending order of price. Remember name need not be a singgle char. ASsume price is integer
3) Assume a list of marks in the form of strings ["30,35,45","55,60,60","-,-"] etc. Total the marks and return each i.e.
110
175
...
4)  Find out whether we are passing the address of the value or the value in case of pythong -- 82.png.

In Java -- for standard parameters it is pass by value. For object -- it is pass by reference


lambda functions



--Start 17-Jun
Functions as parameters
function_as_params.py -- look at 74.png

3 Standard Functions where functions are used as paramerers -- very important -- filter_demo.py
Fiter -- function that takes a value and returns boolean 

Note string is an iterable i.e. each character in string is an element.


for n in filter(ispositve, nums)

filter2_demo

Assignment 1
Use Filter to select all the strings that contain a space. Take a set of strings and display the string if it contains one or more spaces.
Assignment2
Use filter to select all prime numbers from the given list of numbers. -- remember the first argument fn should return a boolean
Assignment 3
USe filter to select valid product codes. [cod1, code2, code3] -- first letter is an alpabet , second is a number., third is a alphabet. IF first and last letter are alphabets, then valid produt code

Assignment 4 --
v1
Use map to convert a set of strings that contaitn digits to floats and then calculate the total
['123','456','789'] should return 123 + 456 + 789
v2
If some of them are not convertible -- treat them as 0


map means mapping

map function

map_demo.py

map is an extremely power fnction -- 75.png
map(func,iterable) unlike filter which expects func to return a boolean -- it returns another value
It does not give a list. it will give one value at a time and is called a lazy function. So, where map is used, it has to be used in a loop to get all values out.
It does not eagerly do it. IT does lazily

If you try to assign a map output
lengths = map(len,names)
print(lenghts) will return  
<map object at 0x00sdfsdf>

--End 17-Jun

Start 16-Jun
*args, **kwargs -- this combination will help in taking many poistional parameters and also many key word parameters

In python -- functions are treated as object unlike other languages such as java which has overloading functionality
-- discussion was around functions as parameters
-- 54.png,55.png, 56.png, 58.png, 59.png,60.png  -- showing that int and function are both objects in python
--61.png -- 62.png -- function as object.py

There is no overloading concept in python. It is completey overriding.

--look at 64.png for more clarity

Jun 16 -- Assignments
1) create a function that takes a collection/list of numbers and returns variance of the list. -- Ask google what variance means
2) Create a function that takes a string and returns number of uppercase letters and lowercase letters. Should return 2 values -- find out best way to return 2 values. --Tip -- use tuple to return 2 values i.e. return(cnt1,cnt2)


End 16 Jun
