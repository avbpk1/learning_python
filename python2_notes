-- Start 23 Jun

-- End 23 Jun

-- Start 22 Jun
>>> imp str_funs
>>> dir str_funs -- will list all functions in that moodule str_funs
Documentation associated with a modeule
"""
aNYT THING ENCLOSED WITHIN THIS Will becom documentation -- below is a skeleton
desc
:param
:return

"""
REPL needs to be restarted to take efect
help(str_funs.count_upper)
-- End 22 Jun

Every folder which has a set of funs can be treated as a package
-- special file __init__py

__init__py.py
print('Loading My Package lib')

from mylib import num_funs
print(num_funs.iseven(10)) 
----
Loading package mylib #-- This is from __init__py.py 
True

from mylib import * -- by default will do nothing unless you add the following in 
__init__py
__all__ = ['num_funs']  -- 



-- Start 20 Jun
Modules
-- Modules can have statements and functions. It is possible to use module in another module. By way of importing . And then we can invoke those functions. 98.png
- str_funs.py in modules folder
import can have an alias. 
e.g. 
import str_funs as sf

from str_funs import count_upper

When ever you refer to a module , you are still referring to the module. All the code will be executed. It is not a good idea to run the code while importing the module. This is to be
executed only when invoke the module.

Modules can be imported. -- During import, we dont want to code be executed
Modules can be run. 
To do that 

print(__name__) -- double underscore -- all pre-defined name start with double underscore or dunder.
returns __main()__

if we invoke module directly , the name of the module is is __main__()
if we import the module , then module is imported and the name is str_funs

differentiate between invoking and importing

How to invoke/import modules from a different directory - 99, 100.png

Only those defined in the module search path will be included.
sys.path variable controls it

It is important to know how to run the program from command line
factorial.py
101.png -- how to make use of or accept parameters from command line -- sys.argv -- list
sys.argv[1] is the first parameter and always the function name -- in command python.py 15
dont proceed if the input is not available. -- factorual.py example

-- Assignment 1 
Enhance Factorial Program 

python factorial.py 7 10 15  should display factorial for each number
i.e.
Factorial 7
Factorial 10
Factorial 15

-- Assignment 2

Create python ValidatePassword.py xyz where xyz is the password parameter
-- Must have one or more uppercase
-- must have digit
-- Must have a @, !, *
-- Must have min 6 chars

-- Assignment 3
Create a module called Encrypt with following functions 
encrypt -- takes a string and returns another string . Change the ascii code of the characters 
decrypt function -- 



#Create a function that takes a list and a value to delete and delete all the occurances of that value from that list
#lst = [10,20,30,20,50]
#delete(lst,20) -- should remove 20 from the list

def del_element(lst,dval):
    for elm in lst:
        if elm == dval:
            lst.remove(elm)
    return lst

lst1 = [10,20,30,20,50]
lst2 = del_element(lst1,20)
print(lst2)-- End 20 Jun

-- Start 19 Jun
85.png, 86.png
pass_parameters.py

passing parameters by reference -- address and not value
if an immutable object is passed, like for e.g. integer -- it does not change the value, instead creaetes a new address for it


If a mutable object is passed -- for e.g. list -- 87.png, 88.png

l = [1,2,3]
def addfirst(lst,value):
   
Everything is passed by reference i.e. address not by value

formal parameter changing by actual parameter will depend on whether the object is mutable or immutable

Assignment 1
Create a function that takes a list and a value to delete and delete all the occurances of that value from that list
lst = [10,20,30,20,50]
delete(lst,20) -- should remove 20 from the list

Assignment 2
Create a function that takes a list and interchanges first 3 values with last 3 values
[1,2,3,4,5,6,7] should result in [7,6,5,4,3,2,1] -- 7 and 1 are interchanged, 6 and 2 are interchanged and 5 and 3 in this example

Assignment 3
Create a function that 


list_products.py -- 

---Local Functions is a function that is inside another functuon -- 89.png

g = 100 # these are global variables and can be accessed from all functions
def f1():
    ev = 10 # this is called enclosing variable and can be accessed from inside the local function.
    #Local function or nested function
    def f2():
        nonlocal ev # if this nonlocal keyword is specified, you are saying you want to make use of ev from the parent function. 
        global g -- similarly global is a keyword
        ev = 0
        lv = 100
        print(lv,ev)

when you create an enclosing variable in a local function  -- 90.png, 91.png
nonlocal ev -- nonlocal is a key word to indicate to use envlosing variable 

order of creation
is there a local variable, if not then enclosing variable, if no enclosing, then it will check global variable, if it is not global, then it will look into built in variable

--Next Topic is 
-- End 19 Jun

-- Start 18 Jun
Remember -- when a function does not have explicit Return for False conditions - it will return None which is equivalent to False

Sorted function -- very powerful along side, filter, map and sorted

80.png

nums = [-10,10,45,-6,7]
for n in sorted(nums, key = abs):
prnt n;

-- Assignment
1) Assume a list of strings which may contain numbers and non numbers and display sum of the numbers. -- clue -- use filter and pick up numbers and sum them.
2) Assume a list of values where you have the product name and price separated by comma (81.png) and display these strings in the descending order of price. Remember name need not be a singgle char. ASsume price is integer
3) Assume a list of marks in the form of strings ["30,35,45","55,60,60","-,-"] etc. Total the marks and return each i.e.
110
175
...
4)  Find out whether we are passing the address of the value or the value in case of pythong -- 82.png.

In Java -- for standard parameters it is pass by value. For object -- it is pass by reference


lambda functions



--Start 17-Jun
Functions as parameters
function_as_params.py -- look at 74.png

3 Standard Functions where functions are used as paramerers -- very important -- filter_demo.py
Fiter -- function that takes a value and returns boolean 

Note string is an iterable i.e. each character in string is an element.


for n in filter(ispositve, nums)

filter2_demo

Assignment 1
Use Filter to select all the strings that contain a space. Take a set of strings and display the string if it contains one or more spaces.
Assignment2
Use filter to select all prime numbers from the given list of numbers. -- remember the first argument fn should return a boolean
Assignment 3
USe filter to select valid product codes. [cod1, code2, code3] -- first letter is an alpabet , second is a number., third is a alphabet. IF first and last letter are alphabets, then valid produt code

Assignment 4 --
v1
Use map to convert a set of strings that contaitn digits to floats and then calculate the total
['123','456','789'] should return 123 + 456 + 789
v2
If some of them are not convertible -- treat them as 0


map means mapping

map function

map_demo.py

map is an extremely power fnction -- 75.png
map(func,iterable) unlike filter which expects func to return a boolean -- it returns another value
It does not give a list. it will give one value at a time and is called a lazy function. So, where map is used, it has to be used in a loop to get all values out.
It does not eagerly do it. IT does lazily

If you try to assign a map output
lengths = map(len,names)
print(lenghts) will return  
<map object at 0x00sdfsdf>

--End 17-Jun

Start 16-Jun
*args, **kwargs -- this combination will help in taking many poistional parameters and also many key word parameters

In python -- functions are treated as object unlike other languages such as java which has overloading functionality
-- discussion was around functions as parameters
-- 54.png,55.png, 56.png, 58.png, 59.png,60.png  -- showing that int and function are both objects in python
--61.png -- 62.png -- function as object.py

There is no overloading concept in python. It is completey overriding.

--look at 64.png for more clarity

Jun 16 -- Assignments
1) create a function that takes a collection/list of numbers and returns variance of the list. -- Ask google what variance means
2) Create a function that takes a string and returns number of uppercase letters and lowercase letters. Should return 2 values -- find out best way to return 2 values. --Tip -- use tuple to return 2 values i.e. return(cnt1,cnt2)


End 16 Jun
