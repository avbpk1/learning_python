--- Start 28 May
------------codecheck.io -- gives sample code site
def__str__(self):
   return f"(self.mname) - (self.age)
def __eq__(self,other):

p1 = PErson   


for all the relational operators -- page 86 -- special methodds 
basically when you say -- 
p1 == p2  -- it will try to compare address of p1 and p2. Similarly for p1 > p2, p1 <p2 

def__gt__(self,other):
     return self.age > other.age 
     
Looking at sorting example. By default  sorted function is sorted on name.  if u want it on age 
try comparing 2 student objects. MAy be based on name.  -- depends on requirement. PRactice. Repetition is important.

Built in Functions related to attributes
refer to screen 43.png, 44.png, 45.png
there are 4 default functions 
getattr, hasattr, delattr, setattr  -- page 84

Built in class attributes

__dict__, __main__

There is always some base functions.next sect() 

go back and enhance

--> Create a class called Time and in this time class -- Hours , mins and secs are required. OVer ride __eq__, lt, str. In addition support "next_sec"-- there is no ++ operator.
-- screen 48.png for above. nextsecond() previoussecond(). MAke sure the range for hr, m, s are maintained i.e.0-23, 0-59, 0-59. 
-- Also provode __sub__(). -- e,.g secs = t1 - t2 -- no of secs in between these two -- screen 49 . Implement subtraction

-----> What is a property and how to create a property.
--Refer to  get_category function in person.py
simplify it by giving p1.category -- looks like an attribute but executes some code. If that is what is required, then we have tocreate a property
For this -- you create the previous line as 
@property
Property -- when a property is referred -- it looks like an attribute but executes a function. The function which returns value. To do it we have to decorate with @property.
--decorators key word. -- 052.png screen
There are 2 types of properties -- read only. Properties can have assignments also. -- 53.png. @name.setter -- 54.png. Java does not have support for properties. c# also does not ahve. Python supports it using property decorator, setter decorator

-- When ever you define a class, a number of things have to be thought about design, for example -- what methods, what properties.

------Inheritence
Python is powerful because it supports multiple inheritence. Java and C# dont support. C++ supports
-- assignment -- 55.png

-- End 28 May



-- Start 27 May
OOP
-- Constructor is nothing between __(dunder - double underscore)
creating classes is all about creating methiods . If it is init -- creating the requisite attributes


Name Mangling. By creating an attribute with a __ -- the intention is to express that it is a private variable. Althought it can be accessed from outside, it should not be done. It is not complete full proof. So nothing is private. If the intention is to make it private, never access it from outside.
-- example student.py

look at the screen shots for each step 
* important thing is to avoid hard coding -- example getdue(self) -- avoid return 5000 .
How do you avoid it.
Course Fee is applicable for all students.
 Best way is to store it in the class i.e. class attribute rather than object attribute. -- first line -- corurses = {'python' }
 They are called static attributes or class attributes
Object attributes are created/repeated for every object.  Class attributes are created for every Class.

def getfee(course)
    return student.courses[course] 

** The above is called static method.  -- @staticmethod -- line is called decorator or metadata. Changes the behaviour of the function. Very important concept for advanced programming. This is to inform it is static method. It is called with out the class name unlione others

line print(student.getfee('ds')) # call static method
--- Always use the function instead of directly calling the dictionary i.e. courses dictiomary in this example
-- In OOP , thje whole focus is on the design of the program. What classes you create, what members should it have. Whether you require data access
-- you can also initialise the coourse in def getfee(course='python') if required.

--- Assignment
In the account class, add a static variable called minimum balance.  Use this variable in withdraw. Dont allow the user to withdraw unless the min balance is maintained. Also provide a method that allows to find out what is the minimum balance. 
--page 82 one more example 
@staticmethod referred to as decorator. They are called with object name. listen to audi
-- Class method -- time.create()  -- where class is used as a parameter and create an object. ex
-- class method is also called factory method which means a method which creates an object.  . Not every class sghhould have it. Page 83. Listen to aud 27May
Instance Method, Static MEthod, Class Method comparision

--> Mostly instance methods are used. followed by static methods and then class methods. Class methods are used rarely.

--One more example
Understand howt to compare objects of a class
-- person example
class Person:
   def __init__(self,name,age):
      self.name = name
      self .age = age
  
  def __str__(self)
      return f"{self.name} - {self.age}"
      
p1 = Person('Bill',30)
print(str(p1))

print (p1) -- gives an unmeanningful message. Every time you print an object, it is converted ti a string

-- To get a meaningful message. Create a special method called str.


-- Assignment 2 -- Do the abover for both account and student
 --- Keep adding the above to every class you create

--End 27 May


-- Missed 26May class
--start 25 May
--- packages 
usestlib.py

from stlib import math_funs as mf

print(mf.iseven(n))
if u try to import every thing from package, it does not import
stlib.py -- pg 77 
validatepassword.py

-- instead of simply saying -- not a valid password -- message should indicate the failre reason. Give exact info i.e. a descriptive message. You can create a function hwer u eturn a string and none if every thing is fine.
Any invalid password indicating what is the actual problem

pypi.org -- python package index. Place where libraries related to python are available. Reposotory of python packages

PYPI -- python
Maven -- Java
NPM -- JS
Nuget -- .net
you can think of them as appstore in mobiles

e.g -- search for requests

>pip  [python install packages] -- pip is in scripts folder (pip or pip3)
--boto3 is to communicate to aws 
--Django -- jango framework
pip list will give list of packages
pip show requess

Requires : -- parameter will show dependencies and when you install , the dependencies will also be automatically installed.
Required By: indicates the packages that are dependent on the current one.


-- End 25 May

-- start 24 May
dunder -- double underscore
Invoking vs Importing

If _name_ == '_main_': # Invoked -- otherwise it is imported

import sys
print(sys.path) # module search path

import math_funs as mf
from 

sys.path.insert(0,r'c:\classroom\may6\demo\stlib') -- remember ' should be bach quote -- this is only for this program. It is not permanent

--for permanent change , set the PYTHONPATH variable
If u dont want this to be executed for every program -- the PYTHONPATH variable can be set to include the list of folders where modules are created

SET PYTHONPATH = c:\dev\python;c:\dev\projects 
sys.path.append(r'

--If we need to run from command prompt
\\> python factors.py will run the program

-- fun\factors.py -- how to receive parameters at the command line -- use import sys -- more about os , less about python 

-- scheduling can be done on the programs -- e.g. sending messages on birthday

-- Assignment 1
Create something similar to a table -- table.py -- display the number of times the user is input -- number is must , length is optional -- 20 should be default. Run it from operating system. If number is not given, then it has to stop with a suitable message
>python table.py 
-- Assignment 2
> python validate.py Abc123_yx xyz 123y -- take strings and determine whether it is a valid password or not. Multi parameters. -- password rules atleast 1 uppercase, 1 special , 1 digit and min 6 chars.

-- Assignment 3
Take input from user if the user is has not provided inputs via the command line
Page 74 -- using command line arguments
--- end of assignment

Getting info about modules
> python
>>> import math_funs
>>> dir(mf) will list all members of the module -- includes variables, predefined list and user defined funs] -- predefined members start with __. For e.g. __cached__
>>> help(mf.iseven) -- help 

>>> help(len) -- gives info about the function -- page 75

if u want to give documentation in your own funs -- use """    """ -- anything between the 2 triple double quotes is the help content


-- new demo folderstlib
in c -- first compile, generate exe -- so key word required to run it. exe is platform dependent. If it is required for mac -- it has tbe generated separately
in java -- first compile -- it will give .class and .class needs to be give to jvm
python -- to be given to .py -- .py is given to the interpreter

-- End 24 May

-- Start 22 May
# This program should have the ability to add numerics only from a list. First hyphen should be treated as -ve sign

data = ["45,56,abc,89", "89,66,,88,75", "81,-10,80,75"]

for m in data:
    marks = map(int, [v for v in m.split(",") if v.lstrip('-').isdigit()])
    print(sum(marks))

# Is it possible to apply the .lstrip function in the below along with filter?
for m in data:
    marks = map(int, filter(str.isdigit, m.split(",")))
    print(sum(marks))
    
 -- Module
Module is a collection of code and functions. It is  a .py file
A module can have a set of functions only which can be imported into other modules and then the functions can be accessed from there
--new folder -- mylib
math_funs.py -- 
use_math.py

import math_funs as mf # mf is the alias. Alias is not mandatory
from math_funs import ispalindrome --# is another way of importing but only as a single function -- page 69 of course material
from math_funs import ispalindrome, iseven --# is another way of importing but 2 functions

print(mf.ispalindrome(101)) 

when importing any executable code from the module is executed
this can be controlled. 
What if the modules are not in the same folder
How to run the module directly from the command prompt?

create a module of functions
count of number of upper case
whether it is valid number
-- End 22 May

--Start 21 May
-- sort dictionary by val
where ever you need a function u can use lambda

d = {1:10,3:5,2:30,4:15}

for k,v in sorted(d.items(), key= lambda t: t[1]):
    print(k,v)

used for simple expressions
lambda can be used for replacing a function

-- sort_lambda.py
Lambda is used for small functions
 -- Fix error assignment
 can be done with either list comprehension or filter
 
 marks = map(int,filter(str.isdigit),m.split(",")):
 
 --- Assignment enhancement -- if negative numbers are there, they also should be included -- consider it. data = ["45,56,abc,89","89,66,88,75","81,-10,80,75"] -- marks_list_v2.py -- improvement required is subtract negative nunbers from the above code

In case of c -- every thing is pass by value -- if we have to pass values by reference, we use pointers
In python , everything is pass by reference 
In Java -- all primitive types are passed by value -- objects by reference
 
--End 21 May

-- Start 20 May
sorted gives the value map object gives the object 
--map gives only the map object(object address) and not the actual value
the way to extract values is as blow
numbers = map(extract_number,codes) -- map_demo.py

example where the map can be used is -- convert a list to integers before adding
data = ["45,56,55,89","22,22,33,44","81,68,80,75]]

marks = map(int,m.split(","))
print(sum(marks))

-- ass 1 -- even numbers by 10 and odd numbers by 5 -- and sort them
-- ass2 - Sort a set of names by length after stripiing spaces. 



--ass 3 
fix the problem to error
data = ["45,56,,89","89,66,88,75","81,68,80,75"]

for m in data:
   marks = map(int, m.split(","))
   
   print(sum(marks))
 
map is going to convert each and every value to some thing and it has to be specified
-- ass4 -- use map to extract all alphabets from each string in a list. Use map and a function
e.g
['Ab12c','x12y2']
result should be 
'Afc'
xyz
--- map, filter and sorted functions

-- Sort dictionary by value -- how

d = {1:10,3:5, 2:30, 4:15}
--below is sorting on keys
for k, v in sorted(d.items()); -- items is giving a list of tuples -- considers first element of tuple which is the key
    print(k,v)
-- below is sorting a dictionary by values

def get_value(t):
    return t[1] --- returns the second value of the tuple -- t[0] returns key
for k,v in sorted(d.items(), key = get_value):
  print(k,v)


Lambda expression

-- end 20 May

-- Start 19 May
How to pass functions as parameters. 
Only functions that return a boolean can be used in this cases 

Python does not support overloading functions. -- Java, C, C++ , c# support over loading

You cannot create 2 functions with same name.
#Example
def add(a,b):
    retunr a + b
    
def add(a,b,c):
  return a + b + c
  
The above gives an error. The reason is that the second assignment 

add
overloading.py for example

Python is not a great oop (object oriented programming). Best programming lang for foundation oop is Java.
A function can be called only after creation. and not before. 


--- Passing function as a parameter
def iseven(n):
    return n % 2 == 0
def number_type(num, func):
  if func(num):
      print("Yes")
  else:
      print("No")
number_type(10, iseven) # remember dont put ()

def ispalindrome(n):
   return str(n) == str(n)[::-1

def number_type(num, func):
   if func(num):
      print("Yes")
   else:
      print("No")
number(10, ispalindrome)


filter

--Ass1
select prime numbers from a list of numbers using filter

-- Ass2
select strings that contain a special character using filter -- c# from ['Python','java','c#']

-- Ass3
select strings that contain more than 2 upper case letters.

-- End 19 May

--Start 18th May
Variable arguments means , multiple values can be passed. After *messages -- the rest of the parametera are kw(keyword) only parameters
e.g
def wish(*names, message = 'Hi'):
    pass;
wish("Scott,"Mark","Larry",message="Hello") -- data type for *names will be tuple -- it is heterogenous. 
print() -- has varying arguments, and keyword only parameters.
Exploring the libraty and what features of the language are supported is important.
Only one multiple variable is possible in the arguments. Not multi. 

def f1(p1, *values, p2):
  pass:
def f1(10,20, p2 =1 )
*names is available in other languages such as Java, C

---Keyword only parameters
Parameters to be passed always using a keyword. No positional parameters.
def wish(*,name,message): -- The * at the beginning indicates kw(keyword) only parameters
1 advantage is it allows the creator to change the parameters order without impacting the users
Disadvantage is parameter names and positions cannot be changed

--Position only parameters/arguments -- Recent feature -- added in 3.8
def wish(msg,name, /):
  print(msg,name)
  
wish("Hello","Mark") 
wish(name="Bill", msg="Hi") will throw an error
gives flexibility to change the names of the variables by retaining the positions

Functions are typically expected to return a value

def factorial(n):
  pass
 
 def iseven(n):
     return n % 2 == 0  # -- returns True or False
   
During run time When ever the function encounters the word return, the value will be returned and the function will be terminated.

def isprime(n)
  for in range(2,n//2 + 1):
      if n % 1 == 0:
         return False
  return True


-- Ass 1
Create a function that takes a string and returns the number of uppercase letters the string has.
-- Ass 2
Create a function that takes a number and returns True if it is a palindrome.
-- Ass 3
Create a function that takes a string and returns all digits of the string as another string -- getdigits("Ab12Y2B") should return '122' as a string
-- Ass 4
Create a function that takes a number and an optional parameter - returns the smallest and largest fators of a number. -- factors(50) should return 2 and 25 -- requires to be returned as collection because you cant return multiple values. facotrs(13) should return None, Nome or [1,13' or give the function an option  e.g. factors(13,returnNone=True)

Look at inbuilt function sorted

Look at zip() also -- for position only parameters

---kw_arguments example
def display(**kwargs):
  for k,v in kwargs.items():
     print(k,v)
  -- In the above case , (**kwargs) -- is a dictionary
 display(a=10, b=20, name = 'Point") --
 display(r=10, x=10, y = 20) --
 
 def show(*args, **kwargs
 show(10,20,name="Point")
 
-- End 18th May

-- Start 19th May
How to pass a function as a parameter to another function.

-- End 19th May
--11-May
In python
for can have else.
When break is not provided and range gets exhausted, the else statement will get executed.
if break gets executed else does not.

for n in range(2, num // 2 +1):
  if num

While can also have an else: construct.
It is not available in other languages 

page 32 of material

assignment 1
take numbers infinitely until user enters 0 and print the average
donttake negative numbers.
if user enters negative number, ignore and move to the next
continue can help

assignment 2
accept 2 numbers and display common factors between them. ignore 1 and itself

test input 10, 20
2 and 5 only because 10 we dont consider

--assignment 3
accept 3 numbers and display the largest of 3 numbers
-- assignment 4
accept the kind of object 1 for circle, 2 for rectangle, 3 for square
and then take necessary input to calculate area of the object. 

codecheck.io has interesting
test banks for java, python, c++
check assignments


-- Data Structures
a) string
s = "Python"
s[0] will give 'P'
s[5] will give 'n'
we dont have array concept in python. Closest is list

s[-1] will give n in the word Python

it is called negative indexing. 
s[-3] 3rd character from the end
strings in python are immutable. Means u cannot modify strings
s[0] = 'p'
-- 11 May end
--Start 12-May
String structures
s = 'Python'

s[:-3] means -- going upto -3
s[:3] will give first 3 characters
hty
s[-3::-1] -- htyP
slicing works on other data structures also
String is like a collection and hence  iterable
for c in s:
print(c)

Ass1
Accept a string from user and check whether it is valid product code? Valid product code is made of 2 alphabets followed by 4 digits.
Ass2
Accept main string and substring and display where the substring is present in main string? All positions where it is present
Ass3
Accept a string and display how many upper case letters the string has.

s.count('do') will count the occurances of the substring in it
s.index('do') will give position of he first occurance of the string
s.find('did') will return -1 if the string is not found else the position. 
but if we write s.index('did) it raises error if the string is not found
s.strip() will remove leading and trailing spaces

Page 40
list is a data structure
A list is a collection of values. Can use slicing and indexing
list is iterable like string
List is mutable
string is not mutable
l.insert(0,5) will insert 5 at 1st position
List can be heterogeneous
l = [1,'abc',True,10.2]
len(l) will giv u number of items
l.remove(3) will remove 3rd element in the list
names = [] -- empty list
names.append('Python')
'Java' in names -- will return True if Java exists in names

Ass 4
Accept numbers until user enters 0 and display numbers in sorted order. Clue -- use list.sort()

pop always returns the last value of the item. pop removes the item from the end l.pop(i)
-- End 12 May

--Start May 13
tuples
List comprehension
Assignment 1


aCCEPT NUMBERS UNTIL 0 IS GIVEN AND DISPLAY ALL EVEN NUMBERS IN SORTED ORDER FOLLOWED BY ODD NUMBERS IN SORTED ORDER

Assignment 2

Accept a string which contains a list of numbers separted by comma and display the average of the numbers.
75,80, 30, 78


Nested lists
Nested lists
n1[1][1]
students =

Assignment 3 
Understand the difference between append ane extend

Tuple is not a list. It is a collection. But importantly it is ummutable
t = (1,2,3)
type(t)
Remember parantheses are used in lists
t = () -- empty tuple
t = (1) is not a tuple with 1 element in it
t = (1,) -- tuple of 1 value
unpacking

t= (10,20)
a,b = t
print(a,b)
10,20
a,b = [1,2]
a,b = "ab" -- is also an example of ab

pyhon tricks book -- same author website
realppython.com -- real python tutorial
look at quizzes

enumerate function gives both element and index. Gives 2 values as 1 object/unit
For that we need to use Tuple


--End May 13

-- Start May 14
sets - no subscript, no  slicing
sets contain only unique values
s = {1,5,7} 
when printing back , order is not guaranteed
pop i supposed to give value from top but in set it gives arbitrary value
pop gives value and removes it
s1 carat symbol exclusive or 

sets - ass1
Accept a string and display how many times each character is occuring

sets - ass2
accept a string and display how many times each word is occuring -- words are assumed by a space
put words in sorted order

-- ass 3
accept 2 strings and display the characters of the first string that are present in the second string. Maintain order of characters in the first string. Order of characters should not be changed in first string


dictionary is a collection of keys and values
in Java -- it is called a Map
d = {1:10, 2:30, 3:25}
d[1]
d[4] gives error
new key d[4] = 40
possible to modify value for existing key

d.items() gives tuples

-- Ass4
Accept name and phone number until END is given and display names and phone numnbers in the ascending order of the names

------Start 15 May
Continue on sets and dictionary

-- Assignment 5
Enhance program to support multi phone numbers for the same customer. if the same phone number is original, ignore that.

-- Beyond Basics in git hub. Search for it for unit test in srikanth/prgagad

Dictionary Comprehension -- page 52

-----Start 17-May
Functions -- takes input in the form of parameters or arguments. They could be optional. And returns value. Which is optional again. When function does not return any value it is called returns, null.
2 Assignments
No specific naming conventions required for function names unlike in other languages like c# . In c# fpr e.g - camel case - PrintTable and in java it is it is pascal case.
If a parameter has a default value assigned, it is called a default parameter -- c and java dont support default parameters

# 1) Create a function that takes a number and displays its factors
# 2) Create a function called print_table which takes the number and length and prints a table for the numbers

# 1) Create a function that takes a number and displays its factors
def display_factors(number):
    factors = [x for x in range(1,(number//2)+1) if number%x == 0]
    print(factors)
display_factors(20)

# Create a function called print_table which takes the number and length and prints a table for the number

def print_table(number,length):
    for i in range(1,length+1):
        print(f"{number} X {i} = {i*number}")

print_table(26,20)
----End 17- May
