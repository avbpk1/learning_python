-- Start 10 -Jun
RE Module
import re
re.search(r"\d","abc123") # gives the Match Object which gives the position
match
Difference between search and match is that match only searches at the beginning
re.match(r"\d","abc123") #returns null
re.fullmatch(r"\d","abc123","sdfs123") #returns null #checks if the entire string is a match
re.fullmatch(r"\d","abc123","123") #returns a match #checks if the entire string is a match
05.png -- look for various examples

-- split
re.split(r"\d+","Abc1Xyz3443Pqr")
['Abc','Xyz','Pqr']
06.png -- \W+ search for bon word characters

re.findall(r"\d+","Abc1Xyz3443Pqr") # splits
['1','3443']
07.png
if you are using -(hyphen) , use at the end as it is a range

--Substitute -- sub
>>re.sub(r'\d+','0','abc122xyz443') 
'abc0xyz0
--if every version of number has to be replaced then dont give +, just give d
re.sub(r'\d','0','abc122xyz443')
'abc000xyz000'
8.png
>> re.sub(r'\W+',' ','This     is    to,   test') #replaces non word spaces -- very important
'This is to test'
-- The above can be used for example in the data prep activities for data science. 
09.png
--Groups. In regular expression , we can have groups
-- e.g first 2 aplhabets and the removing digits in example product code pd3456
>>> re.fullmatch(r'[a-z]{2}\d+','AE3844')
10.ong -- last lines examples about groups
example use case for grouping 3 different groups from dates -- year , month ,day ,
Note the match object will have the different groups

-- Exercises
1) Accept a file and display how many characters , words and lines the file has
2) Assume we have a file called contacts , and in contacts we have the name of the person and mobile number. We dont kno how they are exactly separated. In some cases, they are treated by comma and in some cases a space used. Some times the mobile can come in front of name. Try to group it based on digit and name.
Display , name and mobile numbers sorted by name.  -- expected output 12.png
--use regular expression
--self -- try splitting a json object into an individual topic

-- The DATETIME Module
Either import date time module
or the 4 classes individually -- date, time datetime, timedelta
>> from datetime import*
>>> d = date(2021,1,1)
>>>d
>>>datetime.date(2021,1,1) shows that this is a date
>>>cd = date.today() ##current date stored in day
>>>cd - d 
datetime.timedelta(days=160) # result is the number of days
>>> cd + timedelta(days = 10) # gives a date by adding 10 days. timedelta is an object

Library is something to remember and memorise -- which will help. and can only be achieved via usage and practive
>>> cd.isoforamt() 
'2021-06-10' -- returns date in iso format
>>> cd.strftime("%d-%m-%Y") # will give the date formatted in the specified format

>>> ct = datetime.now() # datetime is a module, datetime is a class in module.
13.png
>>> strptime # ptime means parsing -- if we convert string to date -- it is called parsing. The reverse is called formatting. strf






--End 10-Jun

-- Start 09-Jun

067.png 

70.png
71.png
72.png
73.png

Assignment
search inside the file. Search file content. list must -- 78.png
I want to know all the python files where the content inside the file contains list 80.png -- listen audio also -- it is simple -
--open the file, read the file, check whether it is found in the content. -- 82.png -- look at the highlighted blue area
search string is mandatory , starting file is optional

-- display the file name followed by the line number where the search string sorted is presented.


-- Short Circuiting -- 76.png
te
Python real world usage -- look at 86.png, 87.python -- 88.png
realpython.com
facebook is 80Million lines of code - -
--Python -- script

--Regular Expression 
Regular expression is a string with meta a.k.a special chaaracters. They are meant to search whether a pattern is present in a given string. 
e.g. "[A-Z]+" indicates upper case pattern
"[*+/:-]" if any of these are characters are present then it is a match -- 89.png screen shot gives examples
when you enclose any thin gin square brackets -- it is searching for a list of things 
if there are no square brackets -- then it indicates -- search at the beginning
^A -- search for A at the beginning
0$ -- search for 0 at the end
[A-Z]+ 1 OR MORE
[A-Z]? Zero or mone
[A-Z] Zero or one
\w+   one or more word chjar
\s -- one or more white space
\S  -- one or more non-white space
[0-9]{4} search for 4 occurances
[0-9]{2,5} -- search for 2 to 5 occurances

Usage -- RE Module
--End 09-Jun
-- Start 08 Jun-- 
json
# Removing blank lines 
lines = []
with ope("names.txt","rt) as f: # -- this is called opening the file with context -- gets closed automatically
   for line in f:
     if len(line.strip()) > 0:
         lines.append(line) # at this line, the file gets closed automatically

with open("names.txt","wt") as f:
    for line in lines:
       f.write(line)

-- In python , complex code can be rwitten in compact
----------JSON--------
json -- format in which you can store some data and can also be transferred. 
json stands for java script object notation
JSON

{"Name": "Product1","Price":10000,""qty":7}
[{--},{..},...] -- array of json objects

dynamo db and mongodb are json object based databases. They are called no sql databases
They are called items. Some call them as documents, some call them as items

In python it resembles dictionary -- dictionary and json are interconvertible

class Product
    def __init__(self,name,price):
       self.name = name
       self.price = price
    def __str__(self)
        return f"(self.nae} - {self.price}"
        
def createFromDict(cls,source:dict): -> Product        
        
p = Product("PowerBeats Pro",21500}
json.dumps(p.__dict__)) -- converts dictionary to json
json.dumps(p) # returns a json object  -- converts 
      
-- convert json backs into a product

p = json.loads(jsonstr) # loads converts json back to dictionary -- visually dictionary and json look same -- in d
print(p)

-- normal instance methods, static methods, class methods

class method is a factory method



convert a dictionary object to a product object
with a method

-- look at 61.png
json_demo.py  -- source:dict -- is just a hint -- it helps in identifying -- not making any logic change  
@classmethod
def createFromDict(cls,source:dict):

there is a tool called mypy. Using that we are able to check wheter we are following hints or not. 

python is dynamically typed. There are attempts to make it statically typed. Dynamically typed languages have pit falls. python is trying to add the statically typed. java, c# is etc are static typed language

--62.png is giving the steps to converting dictionary back to json
Good design method to create class methods and classes fromt hat
json_demo.py

-- 64.png
array of json objects derived from a list of dictionaries
--example in 120 converts each contact to dictionary by map function

--- import sys,
-- sys.path

sys.getsizeof() -- gives the bytes that the object occupies

SYS MODULE
OS MODULE
os module interacts with operating system module.
allows you to interact with os 

-- remove blank lines -- option 2 -- rewritten differently

without using lists now. Using temporary file

import os
source = "names.txt"
target = "temp.txt"

with oper(source,"rt") as sf, open(target,"wt") as tf: # open names in read and write to tempt.txt -- s is source, t is target
       for line in sf:
              if len(line.strip()) > 0:
                  tf.write(line)
os.remove("names.txt"
# rename target as source
os.rename(target,source)

---walk method gives -- very interesting -- gives a generator object
files = os.walk(r"c:\classroom\may6\demo\oop") # r stands for raw string -- means it will ignore any meaning for e.g. u dont need to escape the \ 
type(files)
<<class 'generator'>>
next(files) 
-64.png gives details of structure

end --08 Jun

-- Start 07 June --
--Serialisation
--OS and SIT

--dept_avg_salary
-- page 116 - course material
--dept_avg_salary2 for code
49.png

-creating a dictionary.
Take a value and extend it
if name in depts:
   depts[name].extend(salaries)
else
  depts[name] = salaries -- add new dept with salaries -- this data type i.e. list has to be same as given in above
  
 -- dept_avg_salary_v2.py
 --Assignment 1
 Take 2 files i.e. file 1 and file 2. Perform intersection of files. Get all lines that are present in both file 1 and file 2. Try union and minus also.
 
 -- Assignment 2
 Take a file which has blank lines and remove them.  REad every line into the list -- read only all nonblank lines. After reading them right back into the same file. 51.png
 Read and write back to the same file
 
 -- potential data loss in case of abnormal shutdowns. Because opening a file in write mode, will wipe out the data in the file first before writing.
 -- also not suitable for large data sets
 
 2nd technique -- write all non blanks into temp.txt. At the end of it close both files and rename the temp file - 52.png

Serialisation and Deserialisation 
In Python -- Serialisation is called Pickle
Deserialisation is called Unpickling

Serialization is about preserving data.

Serialisaiton is a technique used in Data science -- ML Modelling --if  54,55.png handled properly , we cant write data back
Block 4 is hwere you serialize

3 different possibilities to store the object into a

a) Binary -- internally in bytes -- where we want to reconstruct the data straight away
b) copy the entire object in xml -- not so much in use
c) copy the entire object as json. If we want to transfer data from one point to another -- 

PICKLE -- Python object serialisation
Library is called PICKLE

import pickle 
-- open the file in a binary mode using option of "wb"

f= open("person.data","wb")
-- course notes 118. Pickle or serialisation is the technique. pickle is the name of the function and dump is the method

dump and dumps for pickling    -- dumps writes bytes into an object and not a file
load and loads for unpickling   -- loads reads bytes from an object and not the file like load

-- End 07 June

-- Start 05-Jun
sort_emails.py -- example
--wt -- open file in write mode.

-- Display department name and average salary --dept_avg_salary.py
-- file structure is -- 
f = open("employees.txt","rt") # read text
for line in f:
  parts = line.strip().split(",")
  name = parts[0] -- name is the first part i,e dept
  salaries = parts[1:] -- to get the rest of the salary values
----------2 ways to extract i.e. a list comprehension and map.
-- map is dynamic i.e. only will call as required and does not store it in memory. list comprehension occupies memoru
  salaries = [int(v) for v in parts[1:]]
  #salaries = map(int,parts[1:])
  total = sum(map(int,parts[1:])) -# taking each part and converting to integer and then the sum 
  avg = total /(len(parts) - 1)
  print(f"{name:15}{avg:10.2f})

-- making programs fault tolerant
ue map and filter to handle empty salary values
e.g.
salaries = map(int, filter(str.isdigit,parts[1:])) -- salaries is map object -- map is a lazy function
total = sum(salaries) -- this is where map object gets executed. -- just for understanding

salaries = [int(v) for v in parts[1:] if v.isdigit()] -- list comprehension instead of map -- this will take care of the numeric parts. list is eagerly executing 

--- Assignment
Modify the program to accept a float value as currently is_digit ignores float values

If dept occurs twice -- 44.png -- how to handle multiple values for the same department.


--End 05 Jun
-- Start 04-Jun
Efficiency of generator -- llok at screen shpots 32,33,34

list vs gen comparision 
gen does not store any thing in memory - it only activates when requested. Where as in list, it is stored im memory.

generators are not subscriptable
you cant reuse a gen i.e. one's it generates a value, you cant go back.
35.png is the version of list as opposed to generator
generator is not a data structure.

There is nothing called -- tuple comprehension.
37 screen 

-- Decorators, deep copy, function parameter unpacking, -- these are more advanced concepts to be understood later
-----------Libraries - Very Imp --
-- File Handling
--DAta can be obtained from files, datbase, rest api or website from all 4 sources

-- Create a file and take data from file
-- In general -- 3 steps for file
a) Open, Read or Write , Close

--python file handling
# PRint contents of topics,txt
f = open("topics.txt","rt") # -- rt --read text-- text file is a file that contains text characters. Image and Voice files are binary files.
for line in f.readlines():
   print(line) 
#38.png screen -- explains that a list is being provided.
f.close()

f.readlines() is not always necessary because it creates a list. Sometimes you can read only what ever is required. 

when you read a line, it reads the line along with a newline character and hence it displays an extra line
print() by default prints a new line.
2 ways to deal with it
print(line.strip()) or print(line,sep='')
-- display lines in sorted order, removing duplicates -- 39,40
-- Assignment 
1) Accept a file name from user and display the files after removing white space and converting file to upper case. Removing leading and trailing spaces and convert it to uppercase
2) Accept a file and display the words in the file in sorted order


-- End 04 Jun
--Start 03 Jun--
Assignment feedback
MAke sure that raise an exception instead of printing the Error.
Also the max length -- make sure that it is not defaulted to 10 -- set it to None to acept unlimited values. Only when length 

-- peek is also added

-----Iterator and Generator
iterator is a type in python

l = [1,2,3]
li = iter(l)

--Above li is type of iterator and l is list. We can call methods associated with li. for .g

str(a) is same as saying 

page 109 -- diagram

iterable -- __iter__()
Iterator __next__() -- provides next value in the iterator till it gets exhausted and returns an error

How do you identify an object to be an iterator?

for n in l: -- # l should be iterable
functions like -- sorted also internally uses iterator

iterable is a container for values. The job of an iterator is to provide one value at a time

-- creating customer iterable and iterator
-- 30.png
def__iter__(self) -- iterator and iterable are 2 different classes
---what makes it as iterator is def__next__(self): method
Look at page 110 of course material
-- Stop Iteration Error

dunder iter method is mandatory to make a class iterable __iter__(self)

The job of the iterator is to take a value from a list and return it

-- 2 steps
define iterable. Iterable and Iterator are 2 main elements of an iterator class

--Range class is an iterable -- range is a function that returns an iterable

r = range(10)
type(r)
<class 'range'>
ri = iter(r)
type(ri)
<class 'range_iterator'>

THE GENERATOR
meant to generate values -- pg 111

Unlike iterator where you need to create a class to generate values -- generator is much simpler
How to create and use it.
-- generates values
steps are - -create a function which yeilds values (not return)
--yield is the keyword
-- generator concept is lazy -- it will give values on request and is lazy -- not eagerly

you can create a generator to generate any set of values.


-- assignment
create a generator that takes start and end and returns all palindromes in between those 2 numbers
gen_palindrome


-- in generator -- yield must be given
-- iterator
range is internally an iterable. When object is iterable , it is able to take values ane iterates


-- End 03 Jun

-- Start 02-Jun
exxception assignment discussed. 
-- continuing with exception handling
3 scenarios
1)
a) 012.png


2) 13.png

3) 14.png, 15.png
program abruplty stops and options to recover.


--- if somebody is deposting negative value, then it becomes a error. Transaction Amount should be greater than or equal to 1. If it is 0 or less then raise error

Assignment 3 -- stack -- 8.png
Assignment 4 -- stack 2 -- 19.png -- 
Stack -- LastInFirstOut -- LIFO -- 21.png

Exception is a predefined class. Every exception is derived from an Exception Subclass
user defined exception is a 

create a class called stack. MEthods Push and POP. Raise Stack Empty error.
internally use a data structure like list. Give a try.


listen and 
account.py is now with exception handling 
when you report an exception via a print statement -- then it will let user continue
raise ValueError("Insufficient Funds!
-- End 02-Jun

-- Start 01-Jun--
1) Assignment -- look at diagram

2) Take 5 numbers from user and display total for 5 numbers. While taking numbers -- if there is any invalid input -- make sure to handle it. Dont let program crash
If user enters abc -- ignore abc and move forward.  -- 009.jpg

v1 -- ignore invalid input

v2 -- invalid input ignored but user should still enter 5 numbers.  -- 10.png
super().process() -- super internally uses mro -- so dont use it in multiple inheritene

e.g. call_mul_methods.py

super will result in object


A.process(self) -- this is an object of C
B.process(self)

where ever there is a need for superclass , it is possible to pass a subclass. Because subclass is an extension of superclass.
--same concept with constructors also.
---Java does not support multiple inheritence -- to avoid the non-ambiguity approach.

--Check Multiple inheritence examples from python repository

---No overloading , polymorphism in pythong because it is interpreted language. It is built in

----What is exception and how to handle it?
Type of errors
Syntax Error 
Runtime Error -- also called as Exceptions -- Dangerous -- they stop the program -- crash it 
Logical Errors




--End 01-Jun

-- Start 31 May
inhdemo.py
Every object we create should be close to a real thing
Person is super class. We do not want an object for person and hence make it as an abstract. Person class is marked as abstract as we dont create an object for that.
Studen and Employee are subclasses. We can create objects of Student but not PErson.
#Abstract Class
class Person(ABC):



Doctor -- example

Doctor is the main class

RDoctor Consultant are subclasses from doctor
72.png and 73.png
getsalary() abstract method in salary

Surgeon is an extension of Consultant -- multi level  inheritence example

--------- Multiple inheritence.  Python and C++ support. Very important discussion. 

To create sub class C from 2 different classes -- A and B 

Whenever there is a sub class version that should be considered and not the one in superclass. 

Order of inheritence is important 
class C(A,B):
   pass           --- if the class is found in the first super class it stops there . If it doesnt find then it will go the next one. 
 --- As an extra -- in C# -- it is called virtual base  
--Look at multi level examples
--- 78.png -- example  A is a super class of B . Everything in A is inherited into B. And hence that is given priority over C

mro() -- method resolution order. Every class is derived from order object
mro is tricky
MRO blog from ST

-- End 31 MAy

--- Start 29 May
-- Inheritence
init is constructor
show() is display  -- 59.jpg

inheritence is about creating a new class from an existing class. It is not just about attributes but it is about classes also.
inheritences is about reusability.
for e.g. person class . student and employee can be reused from person class.

start with person class. create common things from details of employee and student. for e.g. name and email.
design thinking is required for class,

why show and ini are required?
uml diagram representing the design of the classes.

superclass and subclass
superclass is inherited into subclass. 
implement

IS A relationship
subclass is a superclass

None is a keyword whic is similar to Null (but indicates no value)

Java does not have default arguments but is achieved by overloading

--OnsiteEmployee(Employee) -- Onsite Employee is inherited from Employee
super().show() -- will take care of printing all 4 parameters

knowledge of functions is critical.

-- Assignment1 -- Create a new class-- Foreign Student. Additional attribute called country needs to be added.

---- refer 

--In Java -- super is a key word and in python it is a function

-- Inheritence is all about IS A Relationship

-- Association is all about HAS A relationship
credit card is one object and customer is another object. Customer HAS A credit card.

--Inheritence is also known as generalization as we start with generic and keep going down to specififcs.
e.g. student is a specific version of person. foreign student is a more specific version.
-- when ever there is over riding , it is followed by super()

-- Overriding -- why is show method repeated in each class definition. we are overriding a method of sub class in super class 

-- Assignment 2
 create classes to store details of resident doctors and consultants. For resident doctors, we have salary per month. For consultants, we have number of visits and charge per visit. 
 
a) For all we have name, mobile number and specialisation(e.g. cardiologist, paediatric).
b) provide a method to calculate the salary of the doctor and another method to display details of the doctor.
c) this is in addition to the constructor which is to be done any way. 
d) consultants may not be just visiting. they might be conducting surgeries. in that case, they may charge additional amount per surgery. Have a consolidated amount for surgery. Consulting surgery. He is not a resident. He does consultancy + surgery.

--- material reference -- page 93 
 
 Givrn an obect -- we can find out whether a instance or not. Subclass or not
 isinstance method
 
 issubclass 
 
 --- End 29 May



--- Start 28 May
------------codecheck.io -- gives sample code site
def__str__(self):
   return f"(self.mname) - (self.age)
def __eq__(self,other):

p1 = PErson   


for all the relational operators -- page 86 -- special methodds 
basically when you say -- 
p1 == p2  -- it will try to compare address of p1 and p2. Similarly for p1 > p2, p1 <p2 

def__gt__(self,other):
     return self.age > other.age 
     
Looking at sorting example. By default  sorted function is sorted on name.  if u want it on age 
try comparing 2 student objects. MAy be based on name.  -- depends on requirement. PRactice. Repetition is important.

Built in Functions related to attributes
refer to screen 43.png, 44.png, 45.png
there are 4 default functions 
getattr, hasattr, delattr, setattr  -- page 84

Built in class attributes

__dict__, __main__

There is always some base functions.next sect() 

go back and enhance

--> Create a class called Time and in this time class -- Hours , mins and secs are required. OVer ride __eq__, lt, str. In addition support "next_sec"-- there is no ++ operator.
-- screen 48.png for above. nextsecond() previoussecond(). MAke sure the range for hr, m, s are maintained i.e.0-23, 0-59, 0-59. 
-- Also provode __sub__(). -- e,.g secs = t1 - t2 -- no of secs in between these two -- screen 49 . Implement subtraction

-----> What is a property and how to create a property.
--Refer to  get_category function in person.py
simplify it by giving p1.category -- looks like an attribute but executes some code. If that is what is required, then we have tocreate a property
For this -- you create the previous line as 
@property
Property -- when a property is referred -- it looks like an attribute but executes a function. The function which returns value. To do it we have to decorate with @property.
--decorators key word. -- 052.png screen
There are 2 types of properties -- read only. Properties can have assignments also. -- 53.png. @name.setter -- 54.png. Java does not have support for properties. c# also does not ahve. Python supports it using property decorator, setter decorator

-- When ever you define a class, a number of things have to be thought about design, for example -- what methods, what properties.

------Inheritence
Python is powerful because it supports multiple inheritence. Java and C# dont support. C++ supports
-- assignment -- 55.png

-- End 28 May



-- Start 27 May
OOP
-- Constructor is nothing between __(dunder - double underscore)
creating classes is all about creating methiods . If it is init -- creating the requisite attributes


Name Mangling. By creating an attribute with a __ -- the intention is to express that it is a private variable. Althought it can be accessed from outside, it should not be done. It is not complete full proof. So nothing is private. If the intention is to make it private, never access it from outside.
-- example student.py

look at the screen shots for each step 
* important thing is to avoid hard coding -- example getdue(self) -- avoid return 5000 .
How do you avoid it.
Course Fee is applicable for all students.
 Best way is to store it in the class i.e. class attribute rather than object attribute. -- first line -- corurses = {'python' }
 They are called static attributes or class attributes
Object attributes are created/repeated for every object.  Class attributes are created for every Class.

def getfee(course)
    return student.courses[course] 

** The above is called static method.  -- @staticmethod -- line is called decorator or metadata. Changes the behaviour of the function. Very important concept for advanced programming. This is to inform it is static method. It is called with out the class name unlione others

line print(student.getfee('ds')) # call static method
--- Always use the function instead of directly calling the dictionary i.e. courses dictiomary in this example
-- In OOP , thje whole focus is on the design of the program. What classes you create, what members should it have. Whether you require data access
-- you can also initialise the coourse in def getfee(course='python') if required.

--- Assignment
In the account class, add a static variable called minimum balance.  Use this variable in withdraw. Dont allow the user to withdraw unless the min balance is maintained. Also provide a method that allows to find out what is the minimum balance. 
--page 82 one more example 
@staticmethod referred to as decorator. They are called with object name. listen to audi
-- Class method -- time.create()  -- where class is used as a parameter and create an object. ex
-- class method is also called factory method which means a method which creates an object.  . Not every class sghhould have it. Page 83. Listen to aud 27May
Instance Method, Static MEthod, Class Method comparision

--> Mostly instance methods are used. followed by static methods and then class methods. Class methods are used rarely.

--One more example
Understand howt to compare objects of a class
-- person example
class Person:
   def __init__(self,name,age):
      self.name = name
      self .age = age
  
  def __str__(self)
      return f"{self.name} - {self.age}"
      
p1 = Person('Bill',30)
print(str(p1))

print (p1) -- gives an unmeanningful message. Every time you print an object, it is converted ti a string

-- To get a meaningful message. Create a special method called str.


-- Assignment 2 -- Do the abover for both account and student
 --- Keep adding the above to every class you create

--End 27 May


-- Missed 26May class
--start 25 May
--- packages 
usestlib.py

from stlib import math_funs as mf

print(mf.iseven(n))
if u try to import every thing from package, it does not import
stlib.py -- pg 77 
validatepassword.py

-- instead of simply saying -- not a valid password -- message should indicate the failre reason. Give exact info i.e. a descriptive message. You can create a function hwer u eturn a string and none if every thing is fine.
Any invalid password indicating what is the actual problem

pypi.org -- python package index. Place where libraries related to python are available. Reposotory of python packages

PYPI -- python
Maven -- Java
NPM -- JS
Nuget -- .net
you can think of them as appstore in mobiles

e.g -- search for requests

>pip  [python install packages] -- pip is in scripts folder (pip or pip3)
--boto3 is to communicate to aws 
--Django -- jango framework
pip list will give list of packages
pip show requess

Requires : -- parameter will show dependencies and when you install , the dependencies will also be automatically installed.
Required By: indicates the packages that are dependent on the current one.


-- End 25 May

-- start 24 May
dunder -- double underscore
Invoking vs Importing

If _name_ == '_main_': # Invoked -- otherwise it is imported

import sys
print(sys.path) # module search path

import math_funs as mf
from 

sys.path.insert(0,r'c:\classroom\may6\demo\stlib') -- remember ' should be bach quote -- this is only for this program. It is not permanent

--for permanent change , set the PYTHONPATH variable
If u dont want this to be executed for every program -- the PYTHONPATH variable can be set to include the list of folders where modules are created

SET PYTHONPATH = c:\dev\python;c:\dev\projects 
sys.path.append(r'

--If we need to run from command prompt
\\> python factors.py will run the program

-- fun\factors.py -- how to receive parameters at the command line -- use import sys -- more about os , less about python 

-- scheduling can be done on the programs -- e.g. sending messages on birthday

-- Assignment 1
Create something similar to a table -- table.py -- display the number of times the user is input -- number is must , length is optional -- 20 should be default. Run it from operating system. If number is not given, then it has to stop with a suitable message
>python table.py 
-- Assignment 2
> python validate.py Abc123_yx xyz 123y -- take strings and determine whether it is a valid password or not. Multi parameters. -- password rules atleast 1 uppercase, 1 special , 1 digit and min 6 chars.

-- Assignment 3
Take input from user if the user is has not provided inputs via the command line
Page 74 -- using command line arguments
--- end of assignment

Getting info about modules
> python
>>> import math_funs
>>> dir(mf) will list all members of the module -- includes variables, predefined list and user defined funs] -- predefined members start with __. For e.g. __cached__
>>> help(mf.iseven) -- help 

>>> help(len) -- gives info about the function -- page 75

if u want to give documentation in your own funs -- use """    """ -- anything between the 2 triple double quotes is the help content


-- new demo folderstlib
in c -- first compile, generate exe -- so key word required to run it. exe is platform dependent. If it is required for mac -- it has tbe generated separately
in java -- first compile -- it will give .class and .class needs to be give to jvm
python -- to be given to .py -- .py is given to the interpreter

-- End 24 May

-- Start 22 May
# This program should have the ability to add numerics only from a list. First hyphen should be treated as -ve sign

data = ["45,56,abc,89", "89,66,,88,75", "81,-10,80,75"]

for m in data:
    marks = map(int, [v for v in m.split(",") if v.lstrip('-').isdigit()])
    print(sum(marks))

# Is it possible to apply the .lstrip function in the below along with filter?
for m in data:
    marks = map(int, filter(str.isdigit, m.split(",")))
    print(sum(marks))
    
 -- Module
Module is a collection of code and functions. It is  a .py file
A module can have a set of functions only which can be imported into other modules and then the functions can be accessed from there
--new folder -- mylib
math_funs.py -- 
use_math.py

import math_funs as mf # mf is the alias. Alias is not mandatory
from math_funs import ispalindrome --# is another way of importing but only as a single function -- page 69 of course material
from math_funs import ispalindrome, iseven --# is another way of importing but 2 functions

print(mf.ispalindrome(101)) 

when importing any executable code from the module is executed
this can be controlled. 
What if the modules are not in the same folder
How to run the module directly from the command prompt?

create a module of functions
count of number of upper case
whether it is valid number
-- End 22 May

--Start 21 May
-- sort dictionary by val
where ever you need a function u can use lambda

d = {1:10,3:5,2:30,4:15}

for k,v in sorted(d.items(), key= lambda t: t[1]):
    print(k,v)

used for simple expressions
lambda can be used for replacing a function

-- sort_lambda.py
Lambda is used for small functions
 -- Fix error assignment
 can be done with either list comprehension or filter
 
 marks = map(int,filter(str.isdigit),m.split(",")):
 
 --- Assignment enhancement -- if negative numbers are there, they also should be included -- consider it. data = ["45,56,abc,89","89,66,88,75","81,-10,80,75"] -- marks_list_v2.py -- improvement required is subtract negative nunbers from the above code

In case of c -- every thing is pass by value -- if we have to pass values by reference, we use pointers
In python , everything is pass by reference 
In Java -- all primitive types are passed by value -- objects by reference
 
--End 21 May

-- Start 20 May
sorted gives the value map object gives the object 
--map gives only the map object(object address) and not the actual value
the way to extract values is as blow
numbers = map(extract_number,codes) -- map_demo.py

example where the map can be used is -- convert a list to integers before adding
data = ["45,56,55,89","22,22,33,44","81,68,80,75]]

marks = map(int,m.split(","))
print(sum(marks))

-- ass 1 -- even numbers by 10 and odd numbers by 5 -- and sort them
-- ass2 - Sort a set of names by length after stripiing spaces. 



--ass 3 
fix the problem to error
data = ["45,56,,89","89,66,88,75","81,68,80,75"]

for m in data:
   marks = map(int, m.split(","))
   
   print(sum(marks))
 
map is going to convert each and every value to some thing and it has to be specified
-- ass4 -- use map to extract all alphabets from each string in a list. Use map and a function
e.g
['Ab12c','x12y2']
result should be 
'Afc'
xyz
--- map, filter and sorted functions

-- Sort dictionary by value -- how

d = {1:10,3:5, 2:30, 4:15}
--below is sorting on keys
for k, v in sorted(d.items()); -- items is giving a list of tuples -- considers first element of tuple which is the key
    print(k,v)
-- below is sorting a dictionary by values

def get_value(t):
    return t[1] --- returns the second value of the tuple -- t[0] returns key
for k,v in sorted(d.items(), key = get_value):
  print(k,v)


Lambda expression

-- end 20 May

-- Start 19 May
How to pass functions as parameters. 
Only functions that return a boolean can be used in this cases 

Python does not support overloading functions. -- Java, C, C++ , c# support over loading

You cannot create 2 functions with same name.
#Example
def add(a,b):
    retunr a + b
    
def add(a,b,c):
  return a + b + c
  
The above gives an error. The reason is that the second assignment 

add
overloading.py for example

Python is not a great oop (object oriented programming). Best 
